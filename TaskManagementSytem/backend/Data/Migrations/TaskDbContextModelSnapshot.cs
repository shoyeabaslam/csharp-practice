// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Data.Migrations
{
    [DbContext(typeof(TaskDbContext))]
    partial class TaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Work",
                            UserId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Personal",
                            UserId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Fitness",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            UserEmail = "alice@example.com",
                            UserName = "Alice",
                            UserPassword = "password123"
                        },
                        new
                        {
                            UserId = 2,
                            UserEmail = "bob@example.com",
                            UserName = "Bob",
                            UserPassword = "password456"
                        });
                });

            modelBuilder.Entity("backend.Entities.UserTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 7, 24, 18, 59, 2, 291, DateTimeKind.Local).AddTicks(8738),
                            Priority = "High",
                            Status = "In Progress",
                            TaskDescription = "Finish the project by the end of the month",
                            TaskName = "Complete project",
                            UserId = 1
                        },
                        new
                        {
                            TaskId = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 7, 16, 18, 59, 2, 291, DateTimeKind.Local).AddTicks(8765),
                            Priority = "Medium",
                            Status = "Not Started",
                            TaskDescription = "Buy milk, eggs, and bread",
                            TaskName = "Buy groceries",
                            UserId = 1
                        },
                        new
                        {
                            TaskId = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 7, 15, 18, 59, 2, 291, DateTimeKind.Local).AddTicks(8767),
                            Priority = "Low",
                            Status = "Completed",
                            TaskDescription = "Run 5km in the morning",
                            TaskName = "Morning run",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("backend.Entities.Category", b =>
                {
                    b.HasOne("backend.Entities.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Entities.UserTask", b =>
                {
                    b.HasOne("backend.Entities.Category", "Category")
                        .WithMany("UserTasks")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("backend.Entities.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Entities.Category", b =>
                {
                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("backend.Entities.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
